returns:
conv_file (str) - name of the converted .xlsx file
TODO: yr could also possibly be returned and then used to name the data.frame if there are multiple years
'
#UNNEEDED WITH parse_xls_table which handles xls files
# import all sheets from the file as tibbles stored in a list
temp_xls <- rio::import_list(xls_path, setclass = "tbl")
yr <- stringr::str_match(xls_path, "Daffodils\\s*(.*?)\\s*.xls")[,2]
# export it as .xlsx file (the sheets go into their place)
conv_file = paste("Daffodils",  yr, ".xlsx", sep='')
rio::export(temp_xls, conv_file)
return(conv_file)
}
get_sheet_names <- function(path){
#This function returns names of all the sheets in the excel files
#inputs:
#path - path of a xlsx file
cells <- xlsx_cells(path)
return(unique(cells$sheet))
}
summary_for_period <- function(path, sheet_name){
##This function retrieves and formats summary_for_period table from Parviflora Financial Report Excel File
###Inputs:
###path - path of a xlsx Parviflora Report file
###sheet_name - name of a sheet from which the table is to be retrieved
#creating cells object
cells <- xlsx_cells(path)
#filtering out unnecessary data
summary <- cells %>%
filter(sheet==sheet_name) %>%
select(sheet, character, numeric, date, row, col, data_type)
#defining the values of the beginning cell and ending cell of summary table
first_cell <- 'Summary for Period'
last_cell <- 'Summary Totals'
#creating a helper table with just the row labels and row and col indexes from the chosen excel sheet
position_and_row <- summary %>% filter(!is.na(character)) %>% select(character, row, col)
#retrieving the coordinates of the first row label and last row labels of a summary_for_period table
beginning_row <- stack(setNames(lapply(position_and_row, grep, pattern = first_cell), 'character'))[[1]]
end_row <- stack(setNames(lapply(position_and_row, grep, pattern = last_cell), 'character'))[[1]]
#selecting only rows that lie between beginning row and end_row, which are part of the summary_for_period table
position_and_row <- position_and_row %>% slice(beginning_row:end_row) %>% filter(col==1)
#selecting a helper column with rows to lookup the corresponding values
rows <- position_and_row %>% select(row)
#creating labels column (removing the first row because it is a name of a table without corresponding value)
position <- position_and_row %>% slice(-1) %>% select(character)
#creating column with values by looking up the values corresponding to rows at which labels lie
trans <- merge(rows, summary[c('numeric', 'row', 'col')], on=row)
#saving each value column to a separate variable
trans_amount <- trans %>% filter(col==4) %>% slice(-1)
trans_count <- trans %>% filter(col==5) %>% slice(-1)
#creating a dataframe with the three columns
df <- data.frame(position, trans_amount$numeric, trans_count$numeric)
#renaming the columns
df <- df %>% rename(position=character, trans_amount=trans_amount.numeric, trans_count=trans_count.numeric)
return(df)
}
parse_xls_table <- function(path, sheet){
#TODO: remove '--' in values
#This function takes Parviflora Financial Report (part with each shops' report) and bundles it together in one table
#inputs:
#path - path of a excel file
#sheet - name or index of a excel sheet
#Reading in the data
df <- read_excel(file_path, sheet = sheet_name) # Equivalent
df <- df %>% rename(labels=1, val1=2, val2=3, val3=4, val4=5)
#setting the value of a first label cell in each individual report to later search for coordinates
first_cell <- 'Submitting Location:'
#creating a vector with locations of each row containing first_cell value
beginning_row <- stack(setNames(lapply(df, grep, pattern = first_cell), 'labels'))[[1]]
#removing rows with summary table
df <- df %>% slice(beginning_row[1]:nrow(df)) %>% select(-c(4,5))
#creating helper table with all rows labels and row and col indexes
labels <- df %>% filter(!is.na(labels))
#creating a vector with locations of each row containing first_cell value
#there is one uneeded row in each shop's table, which is
#submitting location
#code below removes it
#creating a vector with locations of each row containing first_cell value
loc <- stack(setNames(lapply(labels, grep, pattern = first_cell), 'labels'))[[1]]
#removing unneeded rows based on the locations calculated above
labels_2 <- labels %>% slice(-c(loc))
df <- labels_2 %>% rename(trans_amount=2, trans_count=3)
#extracting ids and codes
additional_col_names <- labels %>% slice(c(loc)) %>% rename(id=2, code=3) %>% select(-1)
#putting ids in rows where labels == 'Totals' beceause this is the value that is exatcly the same in each table and is there always
value_to_search_for <- 'Totals'
intervals <- stack(setNames(lapply(df, grep, pattern = value_to_search_for), 'labels'))[[1]]
#creating empty id and code column to later fill them in with corresponding data
df$id <- NA
df$code <- NA
#looping through all rows with 'Total' in labels column and putting a corresponding id and code in respective columns
for (i in 1:length(intervals)) {
df[intervals[i],'id'] <- additional_col_names$id[i]
df[intervals[i], 'code'] <- additional_col_names$code[i]
}
#filling empty rows in id columns with ids
df <- df %>% fill(id, .direction='up') #%>% filter(!character=='--')
df <- df %>% fill(code, .direction='up')
#There is a situation where labels duplicate, in those instances value for one label is neagative, because all labels in each table need to be unique,
#in the code below sufixes are added to labels with negative values
df_trimmed <- df %>%
mutate(trans_amount = replace(trans_amount, is.na(trans_amount), 0)) %>%
mutate(label_suffix = case_when(trans_amount<0 ~ ' (neg)', TRUE ~ '')) %>%
mutate(labels = paste(labels, label_suffix)) %>% select(-label_suffix)
#To make the final table there needs to be only one value column, therefore trans_amount and trans_count are going to be merged
# and additional label column is going to be created
df_trans_amount <- df_trimmed %>% select(labels, trans_amount, id, code)
df_trans_count <- df_trimmed %>% select(labels, trans_count, id, code)
df_trans_amount <- df_trans_amount %>% rename(value=trans_amount)
df_trans_count <- df_trans_count %>% rename(value=trans_count)
df_trans_amount$position <- 'trans_amount'
df_trans_count$position <- 'trans_count'
#creating a stacked tables
df_final <- rbind(df_trans_amount, df_trans_count)
#pivoting the final table
df_final_pivot <- spread(df_final, labels, value)
df_final_pivot <- df_final_pivot %>% select(-names(a)[16])
return(a)
}
parse_xlsx_table <- function(xlsx_path, sheet_name){
#FUNCTION IS OLD AND SHOULD BE DELETED LATER ON
#This function takes Parviflora Financial Report (part with each shops' report) and bundles it together in one table
#inputs:
#path - path of a xlsx file
#importing xlsx file and creating a cells object out of it
cells <- xlsx_cells(xlsx_path)
#setting the value of a first label cell in each individual report to later search for coordinates
first_cell <- 'Submitting Location:'
#getting rid of unnecessary columns
summary <- cells %>%
filter(sheet==sheet_name) %>%
select(sheet, character, numeric, date, row, col, data_type) %>%
filter(col %in% c(1,2,3))
#creating a vector with locations of each row containing first_cell value
beginning_row <- stack(setNames(lapply(summary, grep, pattern = first_cell), 'character'))[[1]]
#removing rows with summary table
summary <- summary %>% slice(beginning_row[1]:nrow(summary))
#creating helper table with all rows labels and row and col indexes
labels <- summary %>% filter(!is.na(character)) %>% select(character, row, col)
#creating helper table with all the numeric values from summary table and col and row indexes
values <- summary %>% select(numeric, row, col)
#creating another helper tables with trans_amount values and trans_count values
val1 <- values %>% filter(col==2)
val2 <- values %>% filter(col==3)
#creating a vector with locations of each row containing first_cell value
#there are six unnedeed labels in each shop's table, those are
#submitting location:
#shop id
#shop code
#empty
#transaction amount
#transaction count
#code below removes those values
#creating a vector with locations of each row containing first_cell value
loc <- stack(setNames(lapply(labels, grep, pattern = first_cell), 'character'))[[1]]
loc_b <- c()
#looping over the locations five times to add the locations of five cells after each occurence of 'Submitting Location:'
for (i in 1:5) {
loc_b <- c(loc_b, loc+i)
}
location <- c(loc, loc_b)
#removing unneeded rows based on the locations calculated above
labels_2 <- labels %>% slice(-c(location))
#joining new labels with value tables created above (val1, val2)
df <- left_join(labels_2, val1, by='row')
df <- left_join(df, val2, by='row')
df <- df %>% rename(trans_amount=numeric.x, trans_count=numeric.y)
#extracting ids
additional_col_names <- labels %>% slice(c(location))
ids <- additional_col_names %>% filter(col==2 & !character=='Transaction Amount') %>% arrange(row)
#extracting codes
codes <- additional_col_names %>% filter(col==3 & !character=='Trans Count') %>% arrange(row)
#putting ids in rows where labels == 'Totals' beceause this is the value that is exatcly the same in each table and is there always
value_to_search_for <- 'Totals'
intervals <- stack(setNames(lapply(df, grep, pattern = value_to_search_for), 'character'))[[1]]
df$id <- NA
df$code <- NA
for (i in 1:length(intervals)) {
df[intervals[i],'id'] <- ids$character[i]
df[intervals[i], 'code'] <- codes$character[i]
}
#filling empty rows in id columns with ids
df <- df %>% fill(id, .direction='up') %>% filter(!character=='--')
df <- df %>% fill(code, .direction='up')
#There is a situation where labels duplicate, in those instances value for one label is neagative, because all labels in each table need to be unique,
#in the code below sufixes are added to labels with negative values
df_trimmed <- df %>% select(character, trans_amount, trans_count, id, code) %>%
mutate(trans_amount = replace(trans_amount, is.na(trans_amount), 0)) %>%
mutate(character_suffix = case_when(trans_amount<0 ~ ' (neg)', TRUE ~ '')) %>%
mutate(label = paste(character, character_suffix))
#To make the final table there needs to be only one value column, therefore trans_amount and trans_count are going to be merged
# and additional label column is going to be created
df_trans_amount <- df_trimmed %>% select(label, trans_amount, id, code)
df_trans_count <- df_trimmed %>% select(label, trans_count, id, code)
df_trans_amount$position <- 'trans_amount'
df_trans_count$position <- 'trans_count'
df_trans_amount <- df_trans_amount %>% rename(value=trans_amount)
df_trans_count <- df_trans_count %>% rename(value=trans_count)
df_final <- rbind(df_trans_amount, df_trans_count)
#pivoting the final table
a <- spread(df_final, label, value)
a <- a %>% select(-names(a)[15])
return(a)
}
merge_summaries <- function(xlsx_path){
#this function creates one summary-for_period combining each sheet of the xlsx file
#input
#xlsx_path - path to xlsx file
sheets <- get_sheet_names(xlsx_path)
df_2 <- data.frame(position=c(), trans_amount=c(), trans_count=c())
for (s in sheets){
df_1 <- summary_for_period(xlsx_path, s)
df_1$sheet <- s
df_2 <- rbind(df_2, df_1)
}
return(df_2)
}
# Define Constants (just for now) - the future loop
sheet_name <- 'Feb20'
###TODO: add store id and month
### Minor improvement: Change functions a bit because we create the object from xlsx_cells() few times and it could be reused
### DONE convert xls to xlsx
### looping through all sheets
paths <- get_file_paths()
# TODO For now we only have one year - thus one file [1] but what in the future?
# Create a loop to iterate through these files
conv_file <- convert_to_xlsx(paths[1])
# commented as it is used inside summary_for_period function
#cells <- xlsx_cells(conv_file)
df_summary <- merge_summaries(xlsx_path) #change to conv_file or even that cells object
#TODO: change summary_for_period function so it can take in xls files
df <- parse_xls_table(xlsx_path, sheet_name) #change to conv_file
#TODO: remove '--' in values - replace with 0s or NAs
daffodiles <- readxl:read_excel("Daffodiles.xls")
daffodiles <- readxl::read_excel("Daffodiles.xls")
daffodiles <- readxl::read_excel("Daffodiles.xls")
sales_feb_2020 <- read.csv("Summary of Sales February 2020.csv")
sales_jan_2020 <- read.csv("Summary of Sales January 2020.csv")
sales_mar_2020 <- read.csv("Summary of Sales March 2020.csv")
stores <- readxl::read_excel("Stores.xlsx")
daffodiles <- readxl::read_excel("Daffodils2020.xls")
View(daffodiles)
chuje <- read.csv("Summary of Sales March 2020")
getwd()
chuje <- read.csv("Daffodilschuj")
getwd()
chuje <- read.csv("Daffodilschuj")
chuje <- read.csv("Daffodilschuj,csv")
chuje <- read.csv("Daffodilschuj.csv")
chuje <- read.csv("Daffodilschuj.csv")
View(chuje)
paths <- get_file_paths_sales()
get_file_paths_sales <- function(pattern = "Summary of Sales*.csv"){
summary_file_paths <- c()
for(f in Sys.glob(pattern)){
summary_file_paths <- c(stores_file_paths,
paste(normalizePath(dirname(f)), fsep = .Platform$file.sep, f, sep = ""))
}
return(summary_file_paths)
}
convert_to_csv <- function(csv_path) {
temp_xls <- rio::import_list(xls_path, setclass = "tbl")
yr <- stringr::str_match(csv_path, "Summary of Sales\\s*(.*?)\\s*.csv")[,2]
conv_file = paste("Summary of Sales", mm,  yr, ".csv", sep='')
rio::export(temp_xls, conv_file)
return(conv_file)
}
get_sheet_names <- function(path){
#This function returns names of all the sheets in the excel files
#inputs:
#path - path of a xlsx file
cells <- CSV_cells(path)
return(unique(cells$sheet))
}
paths <- get_file_paths_sales()
sales_feb_2020 <- read.csv("Summary of Sales February 2020.csv")
sales_jan_2020 <- read.csv("Summary of Sales January 2020.csv")
sales_mar_2020 <- read.csv("Summary of Sales March 2020.csv")
stores <- readxl::read_excel("Stores.xlsx")
daffodiles <- readxl::read_excel("Daffodils2020.xls")
Sys.setlocale("LC_CTYPE", "Polish")
library(haven)
library(tidyverse)
View(daffodiles)
temp = list.files(pattern="Summary of Sales*.csv")
myfiles = lapply(temp, read.delim)
temp = list.files(pattern="Summary of Sales*.csv")
myfiles = lapply(temp, read.delim)
View(myfiles)
getwd()
temp = list.files(pattern="Summary of Sales*.csv")
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
View(Summary.of.Sales.February.2020)
View(Summary.of.Sales.January.2020)
View(Summary.of.Sales.March.2020)
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("Summary of Sales*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("Summary of Sales*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
temp = list.files(pattern="Summary of Sales*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("Summary of Sales*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
temp = list.files(pattern="Summary of Sales*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("Summary of Sales*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
list2env(
lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
temp = list.files(pattern="*.xlsx")
list2env(
lapply(setNames(temp, make.names(gsub("*.xlsx$", "", temp))),
read.csv), envir = .GlobalEnv)
View(Stores)
temp = list.files(pattern="*.xlsx")
list2env(
lapply(setNames(temp, make.names(gsub("*.xlsx$", "", temp))),
read.xlsx), envir = .GlobalEnv)
data.files = list.files(pattern = "*.xlsx")
data <- lapply(data.files, function(x) read.xlsx(x, sheetIndex = 1))
for (i in data.files) {
data <- rbind(data, read.xlsx(i, sheetIndex = 1))
}
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
library(tidyverse)
library(readxl)
f <- list.files(pattern="xls$")
TOTAL <- map_df(f, read_excel)
View(TOTAL)
f <- list.files(pattern="xlx$")
TOTAL <- map_df(f, read_excel)
View(TOTAL)
stores <- readxl::read_excel("*.xlsx")
f <- list.files(pattern="xlx$")
TOTAL <- map_df(f, read_excel)
f <- list.files(pattern="xls$")
TOTAL <- map_df(f, read_excel)
f <- list.files(pattern="xls$")
Daffodils2020 <- map_df(f, read_excel)
View(Daffodils2020)
data.files = list.files(pattern = "*.xlsx")
data <- lapply(data.files, function(x) read.xlsx(x, sheetIndex = 1))
for (i in data.files) {
data <- rbind(data, read.xlsx(i, sheetIndex = 1))
}
library(xlsx)
library(haven)
library(tidyverse)
library(readxl)
library(xlsx)
getwd()
library(haven)
library(tidyverse)
library(readxl)
library(xlsx)
library(haven)
library(tidyverse)
library(readxl)
install.packages("readxl")
library("readxl")
library(readxl)
file.list <- list.files(pattern='*.xlsx')
df.list <- lapply(file.list, read_excel)
View(df.list)
MultipleStoresfiles <- list.files(pattern='*.xlsx')
Stores <- lapply(MultipleStoresfiles, read_excel)
MultipleStoresfiles <- list.files(pattern='*.xlsx')
Stores <- lapply(MultipleStoresfiles, read_excel)
View(Stores)
View(Stores[[1]])
Stores %>% select(STORE.NAME)
Stores %>% select(STORE.NAME)
View(Stores)
install.packages("xlsx")
library("xlsx")
library("xlsx")
library("xlsx")
library("xlsx")
###STORES####
stores <- readxl::read_excel("Stores.xlsx")
###SUMMARY OF SALES####
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
# This will automaticly load any csv file ^
###DAFFODILES####
f <- list.files(pattern="xls$")
Daffodils2020 <- map_df(f, read_excel)
View(Summary.of.Sales.February.2020)
View(stores)
list.files(path = `getwd()`, pattern = "*.csv")
list.files(path = getwd(), pattern = "*.csv")
Sales <- list.files(path = getwd(), pattern = "*.csv")
names(stores) <- c("Store ID", "STORE.NAME")
patterns <- c("*110", "*170", "*390", "*400", "*410", "*420", "*430", "*440", "*510",
"*150", "*210", "*240", "*350", "*200", "*260", "*330", "*540", "*550",
"*570", "*580", "*590", "*270", "*320", "*340", "*500", "*360", "*530")
stores <- readxl::read_excel("Stores.xlsx")
store_name <- stores$`Store Name`
str_detect(temp)
library(haven)
library(tidyverse)
library("xlsx")
str_detect(temp)
str_detect(temp$"STORE..", "\Uhhhhhhhhhh")
str_detect(temp$"STORE..", starts_with(548))
str_detect(temp$"STORE..", starts_with("548"))
str_detect(temp$"STORE..", "548")
str_detect(Summary.of.Sales.January.2020$"STORE..", "548")
str_detect("*.csv$"$"STORE..", "548")
files = list.files(path = "getwd()")
files = list.files(path = getwd())
str_detect(files, "csv")
str_detect(files$"STORE..", "548")
str_detect(files, "548")
str_detect(files, "csv")
str_detect(Summary_of_Sales$"STORE..", "548")
library(haven)
library(tidyverse)
library("xlsx")
str_detect(Summary.of.Sales.January.2020$"STORE..", "548")
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
---
title: "Parviflora Project"
str_detect(Summary.of.Sales.January.2020$"STORE..", "548")
Summary.of.Sales.January.2020 %>%
select(ends_with(patterns
))
View(Summary.of.Sales.January.2020)
Summary.of.Sales.January.2020 %>%
select(ends_with(patterns
))
patterns <- c("*110", "*170", "*390", "*400", "*410", "*420", "*430", "*440", "*510",
"*150", "*210", "*240", "*350", "*200", "*260", "*330", "*540", "*550",
"*570", "*580", "*590", "*270", "*320", "*340", "*500", "*360", "*530")
Summary.of.Sales.January.2020 %>%
select(ends_with(patterns
))
Summary.of.Sales.January.2020 %>%
select("STORE..", ends_with(patterns
))
Summary.of.Sales.January.2020 %>%
select("STORE..", ends_with("*110", "*170", "*390", "*400", "*410", "*420", "*430", "*440", "*510",
"*150", "*210", "*240", "*350", "*200", "*260", "*330", "*540", "*550",
"*570", "*580", "*590", "*270", "*320", "*340", "*500", "*360", "*530"
))
Summary.of.Sales.January.2020 %>%
select("STORE..", ends_with("110"))
Summary.of.Sales.January.2020 %>%
select("STORE..", ends_with(110))
Summary.of.Sales.January.2020 %>%
select("STORE..", ends_with(170))
Summary.of.Sales.January.2020 %>%
select("STORE..", ends_with(`170`))
Summary.of.Sales.January.2020 %>%
select("STORE..", ends_with("170"))
Summary.of.Sales.January.2020 %>%
select("STORE..", ends_with"170")
Summary.of.Sales.January.2020 %>%
select("STORE..", ends_with "170")
Summary.of.Sales.January.2020 %>%
select("STORE..") %>%
ends_with ("170")
Summary.of.Sales.January.2020 %>%
as.character(STORE..) %>%
select("STORE..") %>%
ends_with ("170")
Summary.of.Sales.January.2020 %>%
as.character("STORE..") %>%
select("STORE..") %>%
ends_with ("170")
Summary.of.Sales.January.2020 %>%
as.character("STORE..") %>%
select("STORE..")
Summary.of.Sales.January.2020 %>%
as.character("STORE..") %>%
select("STORE..")
Summary.of.Sales.January.2020 %>%
as.character("STORE..")
temp = list.files(pattern="*.csv")
list2env(
lapply(setNames(temp, make.names(gsub("*.csv$", "", temp))),
read.csv), envir = .GlobalEnv)
View(Summary.of.Sales.January.2020)
stores <- readxl::read_excel("Stores.xlsx")
View(stores)
View(Summary.of.Sales.February.2020)
View(Summary.of.Sales.February.2020)
